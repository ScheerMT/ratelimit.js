{"name":"Ratelimit.js","tagline":"NodeJS library for rate limiting using sliding windows stored in Redis","body":"RateLimit.js\r\n============\r\n[![Build\r\nStatus](https://travis-ci.org/dudleycarr/ratelimit.js.svg)](https://travis-ci.org/dudleycarr/ratelimit.js) [![npm version](https://badge.fury.io/js/ratelimit.js.svg)](http://badge.fury.io/js/ratelimit.js)\r\n\r\nA NodeJS library for efficient rate limiting using sliding windows stored in Redis.\r\n\r\nFeatures\r\n--------\r\n* Uses a sliding window for a rate limit rule\r\n* Multiple rules per instance\r\n* Multiple instances of RateLimit side-by-side for different categories of users.\r\n* Whitelisting/blacklisting of keys\r\n* Includes Express middleware\r\n\r\nBackground\r\n----------\r\nSee this excellent articles on how the sliding window rate limiting with Redis\r\nworks:\r\n\r\n* [Introduction to Rate Limiting with Redis Part 1](http://www.dr-josiah.com/2014/11/introduction-to-rate-limiting-with.html)\r\n* [Introduction to Rate Limiting with Redis Part 2](http://www.dr-josiah.com/2014/11/introduction-to-rate-limiting-with_26.html)\r\n\r\nInstall\r\n-------\r\n\r\n```\r\nnpm install ratelimit.js\r\n```\r\n\r\nUsage\r\n-----\r\n\r\nBasic example:\r\n\r\n```javascript\r\nvar RateLimit = require('ratelimit.js').RateLimit;\r\nvar redis = require('redis');\r\n\r\nvar client = redis.createClient();\r\n\r\nvar rules = [\r\n  {interval: 1, limit: 5},\r\n  {interval: 3600, limit: 1000}\r\n  ];\r\nvar limiter = new RateLimit(client, rules);\r\n\r\nvar showRateLimited = function(err, isRateLimited) {\r\n  if (err) {\r\n    return console.log(\"Error: \" + err);\r\n  }\r\n\r\n  console.log(\"Is rate limited? \" + isRateLimited);\r\n};\r\n\r\n// Exceed rate limit.\r\nfor(var i = 0; i < 10; i++) {\r\n  limiter.incr('127.0.0.1', showRateLimited);\r\n}\r\n```\r\n\r\n\r\nOutput:\r\n```\r\nIs rate limited? false\r\nIs rate limited? false\r\nIs rate limited? false\r\nIs rate limited? false\r\nIs rate limited? false\r\nIs rate limited? true\r\nIs rate limited? true\r\nIs rate limited? true\r\nIs rate limited? true\r\nIs rate limited? true\r\n```\r\n\r\nConstructor Usage:\r\n\r\n```javascript\r\nvar RateLimit = require('ratelimit.js').RateLimit;\r\nvar redis = require('redis');\r\n\r\nvar client = redis.createClient();\r\n\r\nvar rules = [\r\n  {interval: 3600, limit: 1000}\r\n  ];\r\n// You can define a prefix to be included on each redis entry\r\n// This prevents collisions if you have multiple applications\r\n// using the same redis db\r\nvar limiter = new RateLimit(client, rules, 'RedisPrefix');\r\n```\r\n**NOTE:** If your redis library supports key prefixing like [ioredis](https://github.com/luin/ioredis#transparent-key-prefixing) does, this library will _not_ correctly resolve the whitelist/blacklist items. \r\n\r\n\r\nWhitelist/Blacklist Usage\r\n-------------------------\r\n\r\nYou can whitelist or blacklist a set of keys to enforce automatically allowing all actions\r\n(whitelisting) or automatically denying all actions (blacklisting). Whitelists and blacklists\r\ndo not expire so they can be used to allow or limit actions indefinitely.\r\n\r\nAdd to or remove from the whitelist:\r\n\r\n```javascript\r\nvar RateLimit = require('ratelimit.js').RateLimit;\r\nvar redis = require('redis');\r\nvar rateLimiter = new RateLimit(redis.createClient(), [{interval: 1, limit: 10}]);\r\n\r\nrateLimiter.whitelist(['127.0.0.1'], console.log);\r\nrateLimiter.unwhitelist(['127.0.0.1'], console.log);\r\n```\r\n\r\nAdd to or remove from the blacklist:\r\n\r\n```javascript\r\nvar RateLimit = require('ratelimit.js').RateLimit;\r\nvar redis = require('redis');\r\nvar rateLimiter = new RateLimit(redis.createClient(), [{interval: 1, limit: 10}]);\r\n\r\nrateLimiter.blacklist(['127.0.0.1'], console.log);\r\nrateLimiter.unblacklist(['127.0.0.1'], console.log);\r\n```\r\n\r\nExpress Middleware Usage\r\n------------------------\r\n\r\nConstruct rate limiter and middleware instances:\r\n\r\n```javascript\r\nvar RateLimit = require('ratelimit.js').RateLimit;\r\nvar ExpressMiddleware = require('ratelimit.js').ExpressMiddleware;\r\nvar redis = require('redis');\r\n\r\nvar rateLimiter = new RateLimit(redis.createClient(), [{interval: 1, limit: 10}]);\r\n\r\nvar options = {\r\n  ignoreRedisErrors: true; // defaults to false\r\n};\r\nvar limitMiddleware = new ExpressMiddleware(rateLimiter, options);\r\n```\r\n\r\nRate limit every endpoint of an express application:\r\n\r\n```javascript\r\napp.use(limitMiddleware.middleware(function(req, res, next) {\r\n  res.status(429).json({message: 'rate limit exceeded'});\r\n}));\r\n```\r\n\r\nRate limit specific endpoints:\r\n\r\n```javascript\r\nvar limitEndpoint = limitMiddleware.middleware(function(req, res, next) {\r\n  res.status(429).json({message: 'rate limit exceeded'});\r\n});\r\n\r\napp.get('/rate_limited', limitEndpoint, function(req, res, next) {\r\n  // request is not rate limited...\r\n});\r\n\r\napp.post('/another_rate_limited', limitEndpoint, function(req, res, next) {\r\n  // request is not rate limited...\r\n});\r\n```\r\n\r\nDon't want to deny requests that are rate limited? Not sure why, but go ahead:\r\n\r\n```javascript\r\napp.use(limitMiddleware.middleware(function(req, res, next) {\r\n  req.rateLimited = true;\r\n  next();\r\n}));\r\n```\r\n\r\nUse custom IP extraction and request weight functions:\r\n\r\n```javascript\r\nfunction extractIps(req) {\r\n  return req.ips;\r\n}\r\n\r\nfunction weight(req) {\r\n  return Math.round(Math.random() * 100);\r\n}\r\n\r\nvar options = {\r\n  extractIps: extractIps,\r\n  weight: weight\r\n};\r\n\r\napp.use(limitMiddleware.middleware(options, function(req, res, next) {\r\n  res.status(429).json({message: 'rate limit exceeded'});\r\n}));\r\n```\r\n\r\nNote: this is helpful if your application sits behind a proxy (or set of proxies).\r\n[Read more about express, proxies and req.ips here](http://expressjs.com/guide/behind-proxies.html).\r\n\r\nChangeLog\r\n---------\r\n* **1.6.0**\r\n  * Add support for whitelisting and blacklisting keys\r\n* **1.5.0**\r\n  * Add `weight` functionality to `ExpressMiddleware`\r\n  * `ExpressMiddleware.middleware` now takes an options object instead of just `extractIps`\r\n* **1.4.0**\r\n  * Add `violatedRules` to RateLimit class to return the set of rules a key has violated\r\n* **1.3.1**\r\n  * Small fix to `middleware` function in `ExpressMiddleware`\r\n* **1.3.0**\r\n  * Add options to ExpressMiddleware constructor and support ignoring redis level errors\r\n* **1.2.0**\r\n  * Remove `checkRequest` and `trackRequests` from middleware in favor of single `middleware` function\r\n* **1.1.0**\r\n  * Add Express middleware\r\n  * Updated README\r\n  * Added credits on Lua code\r\n* **1.0.0**\r\n  * Initial RateLimit support\r\n\r\nAuthors\r\n-------\r\n\r\n* [Dudley Carr](https://github.com/dudleycarr)\r\n* [Josh Gummersall](https://github.com/joshgummersall)\r\n","google":"UA-58534323-1","note":"Don't delete this file! It's used internally to help with page regeneration."}